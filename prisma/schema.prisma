// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model SocialLinks {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  website   String?
  instagram String?
  facebook  String?
  Profile   Profile[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
}

model Profile {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  displayName    String
  avatarImageUrl String?
  bio            String?
  socialLinks    SocialLinks? @relation(fields: [socialLinksId], references: [id])
  socialLinksId  String?      @db.ObjectId
  User           User[]
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
}

model OAuthProvider {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  googleId   String?
  facebookId String?
  User       User[]
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
}

model Billing {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  bankCode         String?
  bankAccount      String?
  bankAccountOwner String?
  User             User[]
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
}

model Follow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String   @db.ObjectId
  followingId String   @db.ObjectId
  follower    User     @relation("UserFollows", fields: [followerId], references: [id])
  following   User     @relation("UserFollowedBy", fields: [followingId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
}

model ArticleStatus {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  views         Int       @default(0)
  likes         Int       @default(0)
  subscriptions Int       @default(0)
  article       Article[]
}

model Article {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  abstract     String
  content      String
  isNeedPay    Boolean
  wordCount    Int
  readTime     Int
  thumbnailUrl String         @default("")
  tags         String[]       @default([])
  category     Category       @relation(fields: [categoryId], references: [id])
  categoryId   String         @db.ObjectId
  status       ArticleStatus? @relation(fields: [statusId], references: [id])
  statusId     String?        @db.ObjectId
  creator      User           @relation("UserArticle", fields: [creatorId], references: [id])
  creatorId    String         @db.ObjectId
  comments     Comment[]      @relation("ArticleComment")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  path        String
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  article     Article[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  articleId String   @db.ObjectId
  article   Article  @relation("ArticleComment", fields: [articleId], references: [id])
  user      User     @relation("UserComment", fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model User {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  email           String         @unique
  emailVerified   Boolean        @default(false)
  password        String
  profile         Profile?       @relation(fields: [profileId], references: [id])
  profileId       String?        @db.ObjectId
  oAuthProvider   OAuthProvider? @relation(fields: [oAuthProviderId], references: [id])
  oAuthProviderId String?        @db.ObjectId
  billing         Billing?       @relation(fields: [billingId], references: [id])
  billingId       String?        @db.ObjectId
  follows         Follow[]       @relation("UserFollows")
  followedBy      Follow[]       @relation("UserFollowedBy")
  articles        Article[]      @relation("UserArticle")
  Comment         Comment[]      @relation("UserComment")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
}
