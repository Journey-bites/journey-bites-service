// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model SocialLinks {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  website   String?
  instagram String?
  facebook  String?
  Profile   Profile[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
}

model Profile {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  displayName    String
  avatarImageUrl String?
  bio            String?
  socialLinks    SocialLinks? @relation(fields: [socialLinksId], references: [id])
  socialLinksId  String?      @db.ObjectId
  User           User[]
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
}

model OAuthProvider {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  googleId   String?
  facebookId String?
  User       User[]
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
}

model Billing {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  bankCode         String?
  bankAccount      String?
  bankAccountOwner String?
  User             User[]
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
}

model Follow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String   @db.ObjectId
  followingId String   @db.ObjectId
  follower    User     @relation("UserFollows", fields: [followerId], references: [id])
  following   User     @relation("UserFollowedBy", fields: [followingId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
}

model User {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  email           String         @unique
  emailVerified   Boolean        @default(false)
  password        String
  profile         Profile?       @relation(fields: [profileId], references: [id])
  profileId       String?        @db.ObjectId
  oAuthProvider   OAuthProvider? @relation(fields: [oAuthProviderId], references: [id])
  oAuthProviderId String?        @db.ObjectId
  billing         Billing?       @relation(fields: [billingId], references: [id])
  billingId       String?        @db.ObjectId
  follows         Follow[]       @relation("UserFollows")
  followedBy      Follow[]       @relation("UserFollowedBy")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
}
